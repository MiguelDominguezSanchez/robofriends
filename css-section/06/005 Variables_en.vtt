WEBVTT

00:01.350 --> 00:05.940
Welcome back! Up to this point we've played around with some JavaScript types.

00:06.040 --> 00:09.250
Only 3 out of 7. Don't worry, we'll get to the rest of them.

00:09.400 --> 00:12.040
But there's one problem.

00:12.040 --> 00:15.070
How does the program remember things?

00:16.050 --> 00:25.770
For example, if we write "These pretzels are making me thirsty".

00:26.850 --> 00:28.350
And we'll do this.

00:28.350 --> 00:30.350
"+" We need the exclamation "!".

00:30.390 --> 00:31.040
OK.

00:31.620 --> 00:32.540
I enter that.

00:32.700 --> 00:34.100
OK. I get that. That's - that's good.

00:34.110 --> 00:36.750
But if I need to use this again.

00:36.940 --> 00:42.300
Well. Again I have to write "These pretzels

00:44.630 --> 00:47.980
are making me thirsty".

00:49.060 --> 00:52.870
And imagine if have to do that hundreds of times.

00:53.020 --> 00:55.160
That's kind of annoying right?

00:55.180 --> 01:00.560
That's - computers are supposed to help us but instead we just keep writing stuff and keep writing stuff.

01:00.580 --> 01:02.990
And that's not very efficient, is it?

01:04.070 --> 01:07.100
Well to catch and hold values

01:07.100 --> 01:15.630
JavaScript has something called variable's. And variables can be used

01:16.880 --> 01:18.870
with the word 'var'.

01:19.200 --> 01:34.590
So now if I go 'var george', so 'var george = "These pretzels are making me thirsty"'

01:35.620 --> 01:36.580
plus [+] "!".

01:39.900 --> 01:44.470
Notice the 'semicolon' here - I'll explain what that does in a bit.

01:44.520 --> 01:46.850
I press 'Enter'. I get 'undefined'.

01:46.850 --> 01:48.140
Let's not worry about that.

01:48.210 --> 01:49.610
That doesn't matter for now.

01:49.800 --> 01:57.000
And now if I go 'george' and you'll see that Google Chrome actually helps me and recognizes it.

01:57.090 --> 01:58.260
I press 'Enter'.

01:58.650 --> 02:03.250
"These pretzels are making me thirsty!". How awesome is that?

02:03.960 --> 02:06.250
So we're able to store this value.

02:07.110 --> 02:12.510
And obviously this is simple, but imagine, this was a long calculation that we had to make and we want

02:12.510 --> 02:13.330
to access it.

02:13.380 --> 02:17.180
Well, all we need to do now is have 'george'.

02:17.190 --> 02:18.840
It's a 'variable'.

02:18.870 --> 02:25.490
So now you see in the last video when I said that when we're comparing things we have to use '==='

02:25.850 --> 02:34.850
Well because when you do '3=3' it's saying: 'Assign the number 3 to 3'.

02:35.100 --> 02:38.280
But there's a rule with variables. With variables

02:38.420 --> 02:47.180
you can't start with numbers. So if I go 'var 3 = 3', I'll get an error.

02:47.360 --> 02:53.790
But if I go 'var three = 3', well, that's no problem.

02:54.200 --> 02:57.960
And variables have a few rules.

02:58.910 --> 03:03.710
The rules are: Well, it needs to start with a letter.

03:03.710 --> 03:11.550
It can end with a number, that's fine, but it needs to start with the letter and it can't start with a symbol.

03:11.660 --> 03:22.030
So I can do 'var &hello = 5'. Now I'll get en error.

03:22.040 --> 03:28.480
So a variable needs to start with the letter, can end in a number, that's fine.

03:28.700 --> 03:37.140
And there's a few other special cases. A variable can also start with a '$' or '_'.

03:37.520 --> 03:42.950
But we don't need to worry about that too much and the standard and JavaScript so you won't get an

03:42.950 --> 03:43.400
error.

03:43.430 --> 03:52.610
If this happens, but you do something called 'camel case'. So if it was a word, let's say 'firstname', you

03:52.710 --> 03:56.660
do 'camel case', because these are two separate words. You do lowercase

03:56.690 --> 04:01.120
the first word. Second word is going to have uppercase.

04:01.160 --> 04:08.200
So 'firstName'. You've capitalized the first letter and that's called 'camel case'.

04:08.200 --> 04:16.030
So still not getting what variables are? Well, I'm going to demonstrate this point further

04:16.030 --> 04:20.620
and why we need to store values in a programming language.

04:20.620 --> 04:28.210
I'm going to introduce you to a little cool trick called 'prompt'. And 'prompt()', when I use these brackets

04:29.710 --> 04:30.920
and I press 'Enter'...

04:31.570 --> 04:32.520
Look at that.

04:32.630 --> 04:37.470
I've got something here and it's asking for something and I press OK.

04:37.610 --> 04:38.790
And look at that!

04:38.930 --> 04:40.380
It returns whatever I typed.

04:40.550 --> 04:42.680
Let's try that again. If I go 'prompt()',

04:43.700 --> 04:47.030
press 'Enter' and say 'Hello', press 'OK'.

04:48.240 --> 04:49.840
I get that response back.

04:50.210 --> 04:50.420
OK.

04:50.430 --> 04:55.430
So how can we say something like 'What's your username?' and store that value?

04:55.470 --> 05:02.790
That's something that we use quite a lot on websites, right? Well, with 'prompt' you can do 'prompt()'.

05:02.790 --> 05:11.930
Then here we'll say "What is your username".

05:12.000 --> 05:13.890
So we're entering the string here.

05:14.160 --> 05:17.380
And if I press 'Enter'.

05:17.510 --> 05:20.000
OK, so it says "What is your username".

05:20.000 --> 05:28.880
So now if I type in my username is "andrei", I get the 'username'. So using that knowledge,

05:29.080 --> 05:33.940
let's make a calculator. Let's do 'var first = prompt()'

05:38.420 --> 05:40.310
"enter first number"

05:43.120 --> 05:49.840
And then I 'Enter' pressed 'Shift' here, so that I can add a new line. So 'Shift', 'Enter' and I'm going to say

05:50.680 --> 05:54.840
'var second = prompt()'

05:58.060 --> 06:00.710
"enter second number"

06:04.550 --> 06:14.580
Now if I press 'Enter', I'll get 'enter first number'. I'll say '5', press OK, then 'enter second number' and I

06:14.580 --> 06:17.460
say '10' and press OK.

06:19.210 --> 06:19.430
OK.

06:19.450 --> 06:21.970
But now I got 'undefined'.

06:22.330 --> 06:23.730
But here's the cool thing.

06:23.750 --> 06:31.470
Now I have these values held in these variables, so I can use them. If I check 'first',

06:31.510 --> 06:35.260
I have "5"; if I check 'second',

06:35.480 --> 06:37.080
I have "10".

06:37.340 --> 06:39.810
But you'll notice that I have double quotes [""] around them.

06:39.980 --> 06:46.230
And that's because 'prompt' automatically changes it to String, it's expecting a form of text.

06:46.280 --> 06:50.540
So there's a trick to change a String into a Number.

06:50.730 --> 06:56.960
And all we need to do and this is just syntax we need to remember is 'Number(first)'.

06:59.640 --> 07:00.730
And it'll give us '5'.

07:00.900 --> 07:21.280
So all we need to do now is do 'Number(first) + Number(second)'. And we'll get the sum of these 2.

07:21.310 --> 07:23.530
But again we can use a variable here.

07:23.530 --> 07:25.260
I don't want to keep typing this.

07:25.270 --> 07:33.400
So what if I do 'var sum = Number(first) + Number(second);'

07:33.640 --> 07:39.340
Press 'Enter'. Nothing yet, because it's in the 'sum' now.

07:40.740 --> 07:45.410
So if I asked for 'sum, I get '15'.

07:45.510 --> 07:45.720
OK.

07:45.720 --> 07:50.340
So let's write our first program here.

07:50.520 --> 07:54.800
I'm going to show you one other cool trick and that is 'alert'.

07:54.810 --> 08:01.710
So instead of 'prompt' we're going to use 'alert'. And 'alert()'.

08:01.720 --> 08:04.600
What it does is - it says "hi there!"

08:08.330 --> 08:14.510
If I press 'Enter', I get a pop-up, but without anything to enter, just an 'OK' button.

08:14.530 --> 08:18.550
So using this we can create a calculator.

08:18.730 --> 08:19.870
So let's do this.

08:19.900 --> 08:25.960
And in Chrome if you actually press the '↑' you'll remember your history and you can pull up whatever

08:25.960 --> 08:27.080
you've typed in.

08:27.250 --> 08:31.410
So you remember here we have 'first', 'second'.

08:31.500 --> 08:47.420
So those are the two 'prompt'-s and then I'm going to say 'var sum = Number(first) +'

08:48.850 --> 08:54.200
'Number(second);'

08:54.230 --> 08:58.680
And finally again I do 'Shift', 'Enter', so that the code doesn't get executed.

08:58.880 --> 09:03.330
And I do 'alert(sum);'.

09:03.390 --> 09:06.570
Just looking at this, what do you think is going to happen?

09:06.580 --> 09:12.990
I first asked for a 'prompt' and I stored that value in 'first'; the second 'prompt' asked for a 'second' number.

09:13.030 --> 09:14.590
Stores it in the 'second'.

09:14.590 --> 09:18.840
The 'sum' calculates the two numbers and then I 'alert' the 'sum'.

09:19.030 --> 09:20.730
I'm going to press 'Enter' and see what happens.

09:22.460 --> 09:24.730
Enter first number. I'm going to say '15'.

09:25.160 --> 09:29.010
OK. Next number. I'm going to say '20'.

09:29.030 --> 09:30.460
OK.

09:30.510 --> 09:31.710
And look at that!

09:31.830 --> 09:36.460
I got '35' as the answer.

09:36.560 --> 09:42.660
And again, knowing what we know about Strings and Numbers, I can now do -

09:42.660 --> 09:46.750
again I pressed '↑' to have exactly what I wrote back,

09:46.770 --> 09:57.950
Now I can say within the 'alert("The sum is:" + sum);'.

09:58.010 --> 10:08.750
Let's see that. If I press 'Enter', I'll go '3 + 4'. 'The sum is:7'. Look at that! Our first program.

10:09.380 --> 10:18.720
Variables can hold any JavaScript type. Think of them as little drawers in your desk.

10:18.720 --> 10:25.830
So in your desk you can open up that drawer and put anything you want in there: your pens, paper, erasers,

10:25.830 --> 10:29.630
calculators and you can close that drawer.

10:29.670 --> 10:34.680
And whenever you need, a pen or a calculator, you can open that drawer and grab it.

10:34.680 --> 10:37.210
And that's what variables are.

10:37.400 --> 10:44.950
Now the one thing that I've kind of omitted and I haven't told you about is this little weird semicolon here.

10:44.990 --> 10:46.430
Why do we need it?

10:46.430 --> 10:55.640
I mean, we were able to do '3+4' and we didn't see a 'semicolon'. Well, in JavaScript

10:55.640 --> 11:00.930
'semicolon' means the end of an expression.

11:00.960 --> 11:02.870
So what does that mean?

11:03.860 --> 11:11.850
A fragment of code that produces a value is called an 'expression'. So any value that's written really

11:11.850 --> 11:12.550
is an 'expression'.

11:12.570 --> 11:20.910
So if I do '3', well, that's an 'expression', it's produces a value. '3+4' is an 'expression'. In

11:20.910 --> 11:21.930
JavasScript

11:21.990 --> 11:25.820
the rule is - and there are some people actually that don't use semicolons anymore.

11:25.830 --> 11:33.080
But the way it was built and the way that it's intended to work is to do '3+4' add a 'semicolon'.

11:33.270 --> 11:37.140
Most of the time if you forget, it will still work.

11:37.180 --> 11:39.950
There's only small cases where I'll break your program.

11:40.020 --> 11:47.010
But just to form good habits for now, at the end of each expression, so that is anything we've done so

11:47.010 --> 11:50.890
far, add a 'semicolon' and you'll get used to it.

11:52.710 --> 12:01.600
OK. Let's keep going with variables, because they're very interesting. What if I do 'var a = true'?

12:02.090 --> 12:06.060
Because remember variables can hold anything.

12:06.380 --> 12:15.500
So variables can hold Booleans, and variables can hold Strings, and variables can hold Numbers, as we've seen.

12:15.500 --> 12:17.610
So we're just going to hold 'var a = true'.

12:17.650 --> 12:22.170
But now what if I -

12:22.560 --> 12:27.360
well I can access 'a', but what if I say 'a = "Hello"?'

12:27.710 --> 12:35.300
What do you think will happen if I press 'a' and then 'Enter'?

12:35.300 --> 12:46.710
Well, I get "Hello", because you can reassign a value to 'a', because initially the program thought 'a' equals to 'true'.

12:46.720 --> 12:49.770
But then we said: 'Well, "a" = "Hello" now'.

12:49.810 --> 12:58.810
So it discarded the 'true' value and now 'a' is equal to 'Hello' and we've completely forgotten about 'true'

13:00.340 --> 13:01.040
OK.

13:01.390 --> 13:02.710
Another little trick.

13:02.770 --> 13:06.940
What happens if I go like this? [var a;]

13:06.940 --> 13:08.420
Does that work or will I get an error?

13:08.470 --> 13:11.740
Let's see.

13:11.890 --> 13:12.490
OK. 'undefined'.

13:12.490 --> 13:14.530
I didn't get that red bar, no error.

13:14.560 --> 13:18.010
OK. What if I access the 'a', let's see what happens.

13:18.010 --> 13:24.880
Well "Hello" was assigned at the last part. Let's do a different variable. So if I do variable 'b', which

13:24.880 --> 13:31.860
we haven't used before. And I do this. Let's see if we can access it. 'undefined'.

13:32.000 --> 13:44.110
'b' is undefined. And you may have noticed this before, but 'undefined' is our 4th type in JavaScript. And

13:44.110 --> 13:50.920
I know it's weird, because you're, you're asking yourself "What is 'undefined'?". And 'undefined' is just one

13:51.160 --> 13:54.630
thing in JavaScript. As the name suggests,

13:54.640 --> 13:57.600
this means that the variable has not been assigned.

13:58.090 --> 14:07.240
So, think of it as you'll get 'undefined' if variable 'password' is like this.

14:07.270 --> 14:15.760
So if a user doesn't put in a 'password', well, you'll get 'undefined' and you'll be able to say "Well 'password'

14:15.760 --> 14:16.750
is undefined".

14:16.810 --> 14:20.750
You need to enter a 'password' or maybe a form requires an email address.

14:20.750 --> 14:30.250
Well, if email is 'undefined', then you can't sign them up to the form. So 'undefined' is used when nothing

14:30.250 --> 14:33.750
is assigned to a variable.

14:33.770 --> 14:38.740
So remember this, just like you move stuff out of the drawer in your desk and put something else

14:38.740 --> 14:43.490
in, variables can be assigned to different things.

14:43.490 --> 14:51.730
I can move my pen from one drawer to another, I can change things in that drawer and if there's nothing

14:51.730 --> 14:52.560
in that drawer,

14:52.600 --> 14:56.400
well, it's 'undefined'. OK.

14:56.880 --> 14:59.370
That's a very-very big concept in JavaScript.

14:59.370 --> 15:04.100
Hopefully you understand. I have a few exercises for you at the end of this video.

15:04.110 --> 15:05.720
I know you can do it!

15:05.730 --> 15:08.870
Good luck! And see you in the next video.

15:08.940 --> 15:09.150
Bye-bye
